package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"

	"github.com/Mrs4s/MiraiGo/client"
	"github.com/Mrs4s/MiraiGo/message"
	"github.com/spf13/viper"
)

func main() {
	bot := client.NewClient(viper.GetInt64("bot.uin"), viper.GetString("bot.passwd"))
	client.GenRandomDevice()
	ioutil.WriteFile("device.json", client.SystemDeviceInfo.ToJson(), os.FileMode(0755))
	b, _ := os.ReadFile("device.json")
	client.SystemDeviceInfo.ReadJson(b)
	bot.Login()

	groupId, friendId :=
		viper.GetInt64("group.demo_QQ_Group"),
		viper.GetInt64("friend.demo_QQ_Friend")

	// 发送私聊消息
	bot.SendPrivateMessage(friendId, message.NewSendingMessage().Append(message.NewText("你好！ (*´▽｀)ノノ")))

	// 发送群聊消息
	bot.SendGroupMessage(groupId, message.NewSendingMessage().Append(message.NewText("大家好，我是一个机器人！Hi~ o(*￣▽￣*)ブ")))

	// 在有权限的情况下 `@全体成员`
	bot.SendGroupMessage(groupId, message.NewSendingMessage().Append(message.AtAll()))

	// 在被 At 的情况下返回当天天气
	bot.GroupMessageEvent.Subscribe(func(c *client.QQClient, e *message.GroupMessage) {
		if e.GroupCode == groupId {
			c.SendGroupMessage(e.GroupCode,
				message.NewSendingMessage().Append(message.NewAt(e.Sender.Uin, getCurrentWeather())))
		}
	})

	// ...

	// 在群成员加入时 at 并欢迎
	bot.GroupMemberJoinEvent.Subscribe(func(c *client.QQClient, e *client.MemberJoinGroupEvent) {
		if e.Group.Code == groupId {
			c.SendGroupMessage(e.Group.Code,
				message.NewSendingMessage().Append(message.NewAt(e.Member.Uin, "欢迎━(*｀∀´*)ノ亻!")))
		}
	})
}

// Generated by https://quicktype.io

type WeatherInfo struct {
	Cityid     string  `json:"cityid"`
	City       string  `json:"city"`
	CityEn     string  `json:"cityEn"`
	Country    string  `json:"country"`
	CountryEn  string  `json:"countryEn"`
	UpdateTime string  `json:"update_time"`
	Data       []Datum `json:"data"`
	Nums       int64   `json:"nums"`
}

type Datum struct {
	Day           string        `json:"day"`
	Date          string        `json:"date"`
	Week          string        `json:"week"`
	Wea           string        `json:"wea"`
	WeaImg        string        `json:"wea_img"`
	WeaDay        string        `json:"wea_day"`
	WeaDayImg     string        `json:"wea_day_img"`
	WeaNight      string        `json:"wea_night"`
	WeaNightImg   string        `json:"wea_night_img"`
	Tem           string        `json:"tem"`
	Tem1          string        `json:"tem1"`
	Tem2          string        `json:"tem2"`
	Humidity      string        `json:"humidity"`
	Visibility    string        `json:"visibility"`
	Pressure      string        `json:"pressure"`
	Win           []string      `json:"win"`
	WinSpeed      string        `json:"win_speed"`
	WinMeter      string        `json:"win_meter"`
	Sunrise       string        `json:"sunrise"`
	Sunset        string        `json:"sunset"`
	Air           string        `json:"air"`
	AirLevel      string        `json:"air_level"`
	AirTips       string        `json:"air_tips"`
	Phrase        string        `json:"phrase"`
	Narrative     string        `json:"narrative"`
	Moonrise      string        `json:"moonrise"`
	Moonset       string        `json:"moonset"`
	MoonPhrase    string        `json:"moonPhrase"`
	Rain          string        `json:"rain"`
	UvIndex       string        `json:"uvIndex"`
	UvDescription string        `json:"uvDescription"`
	Alarm         []interface{} `json:"alarm"`
}

func getCurrentWeather() string {
	client := &http.Client{}
	req, err := http.NewRequest("GET", "https://v0.yiketianqi.com/api?unescape=1&version=v91&appid=43656176&appsecret=I42og6Lm&ext=&cityid=&city=%E6%9D%AD%E5%B7%9E", nil)
	if err != nil {
		log.Fatal(err)
	}

	// Set Headers
	{
		req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
		req.Header.Set("Accept-Language", "zh-CN,zh;q=0.9")
		req.Header.Set("Connection", "keep-alive")
		req.Header.Set("Sec-Fetch-Dest", "document")
		req.Header.Set("Sec-Fetch-Mode", "navigate")
		req.Header.Set("Sec-Fetch-Site", "none")
		req.Header.Set("Sec-Fetch-User", "?1")
		req.Header.Set("Upgrade-Insecure-Requests", "1")
		req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36")
		req.Header.Set("sec-ch-ua", `" Not A;Brand";v="99", "Chromium";v="101", "Google Chrome";v="101"`)
		req.Header.Set("sec-ch-ua-mobile", "?0")
		req.Header.Set("sec-ch-ua-platform", `"Windows"`)
	}

	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	bodyText, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}

	var weatherInfo WeatherInfo
	json.Unmarshal(bodyText, &weatherInfo)
	return ""
}
